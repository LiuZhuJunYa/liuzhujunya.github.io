import{_ as d}from"./ValaxyMain.vue_vue_type_style_index_0_lang-Bn109ln0.js";import{c,w as s,f as u,a as g,p as r,o as E,g as l,h as i,r as n}from"./app-DvGICojQ.js";import"./YunFooter.vue_vue_type_style_index_0_lang-6I6EwKPx.js";import"./YunCard.vue_vue_type_script_setup_true_lang-G2SLBOpE.js";import"./index-C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-B-GmT0Fn.js";import"./post-JeTKiWMk.js";const y="/assets/cg-intro-DqplNX9t.png",m="/assets/dispatch-BM1poPHS.png",F="/assets/cha-eg-27ylEJuY.png",C="/assets/cha-ap-DtsdtiUm.png",v="/assets/cgc-eg-8COkwYXr.png",f="/assets/icfg-eg-Cp_QM16Z.png",A="/assets/ipa-eg-CVeRORds.png",b="/assets/pa-eg-DPaxVrf_.png",R={__name:"20240802 5 过程间分析",setup(x,{expose:p}){const t=JSON.parse('{"title":"5 过程间分析","description":"","frontmatter":{"title":"5 过程间分析","date":"2024-08-02T00:00:00.000Z","tags":["静态代码分析"],"categories":["静态代码分析"]},"headers":[{"level":2,"title":"5.1 过程间分析的动机","slug":"_5-1-过程间分析的动机","link":"#_5-1-过程间分析的动机","children":[]},{"level":2,"title":"5.2 调用图的构建","slug":"_5-2-调用图的构建","link":"#_5-2-调用图的构建","children":[{"level":3,"title":"5.2.1 基本概念","slug":"_5-2-1-基本概念","link":"#_5-2-1-基本概念","children":[]},{"level":3,"title":"5.2.2 Java中的方法调用","slug":"_5-2-2-java中的方法调用","link":"#_5-2-2-java中的方法调用","children":[]},{"level":3,"title":"5.2.3 虚调用的方法派发","slug":"_5-2-3-虚调用的方法派发","link":"#_5-2-3-虚调用的方法派发","children":[]},{"level":3,"title":"5.2.4 类层级结构分析","slug":"_5-2-4-类层级结构分析","link":"#_5-2-4-类层级结构分析","children":[]},{"level":3,"title":"5.2.5 通过CHA构建调用图","slug":"_5-2-5-通过cha构建调用图","link":"#_5-2-5-通过cha构建调用图","children":[]}]},{"level":2,"title":"5.3 过程间控制流图","slug":"_5-3-过程间控制流图","link":"#_5-3-过程间控制流图","children":[]},{"level":2,"title":"5.4 过程间数据流分析","slug":"_5-4-过程间数据流分析","link":"#_5-4-过程间数据流分析","children":[{"level":3,"title":"5.4.1 过程间与过程内数据流分析的区别","slug":"_5-4-1-过程间与过程内数据流分析的区别","link":"#_5-4-1-过程间与过程内数据流分析的区别","children":[]},{"level":3,"title":"5.4.2 过程间常量传播","slug":"_5-4-2-过程间常量传播","link":"#_5-4-2-过程间常量传播","children":[]}]},{"level":2,"title":"5.5 自检问题","slug":"_5-5-自检问题","link":"#_5-5-自检问题","children":[]}],"relativePath":"pages/posts/静态代码分析/20240802 5 过程间分析/20240802 5 过程间分析.md","path":"/home/runner/work/LiuZhuJunYa.github.io/LiuZhuJunYa.github.io/pages/posts/静态代码分析/20240802 5 过程间分析/20240802 5 过程间分析.md","lastUpdated":1731428437000}'),h=g(),e=t.frontmatter||{};return h.meta.frontmatter=Object.assign(h.meta.frontmatter||{},t.frontmatter||{}),r("pageData",t),r("valaxy:frontmatter",e),globalThis.$frontmatter=e,p({frontmatter:{title:"5 过程间分析",date:"2024-08-02T00:00:00.000Z",tags:["静态代码分析"],categories:["静态代码分析"]}}),(a,k)=>{const o=d;return E(),c(o,{frontmatter:u(e)},{"main-content-md":s(()=>k[0]||(k[0]=[l("p",null,[i("原文链接："),l("a",{href:"https://static-analysis.cuijiacai.com/05-inter/",target:"_blank",rel:"noreferrer"},"https://static-analysis.cuijiacai.com/05-inter/")],-1),l("h1",{id:"_5-过程间分析",tabindex:"-1"},[i("5 过程间分析 "),l("a",{class:"header-anchor",href:"#_5-过程间分析","aria-label":'Permalink to "5 过程间分析"'},"​")],-1),l("blockquote",null,[l("p",null,"在这一章当中只考虑传值调用（Call-By-Value），传址调用（Call-By-Reference）暂不考虑，会在指针分析中详细讲解。")],-1),l("h2",{id:"_5-1-过程间分析的动机",tabindex:"-1"},[i("5.1 过程间分析的动机 "),l("a",{class:"header-anchor",href:"#_5-1-过程间分析的动机","aria-label":'Permalink to "5.1 过程间分析的动机"'},"​")],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.1"),l("p",null,[i("我们称一个静态分析是 "),l("strong",null,"过程内分析（Intraprocedural Analysis）"),i(" ，如果它因为 "),l("strong",null,"安全近似（Safe-approximation）"),i(" 的原则，对程序中所有的过程调用作 "),l("strong",null,"最保守的假设（Most Conservative Assumption）"),i(" ；如果一个静态分析考虑过程间的控制流，分析被调用过程内的具体变化，我们称其为 "),l("strong",null,"过程间分析（Interprocedural Analysis）"),i(" 。")])],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.2"),l("p",null,[i("我们将表示过程间控制流的边称为"),l("strong",null,"过程间的控制流边（Interprocedural Control-flow Edge）"),i("，包括 "),l("strong",null,"调用边（Call Edge）"),i(" 和 "),l("strong",null,"返回边（Return Edge）"),i("。")])],-1),l("p",null,[i("到目前为止，我们学习的所有的静态分析都是过程内分析，如果我们用过程内分析的方法来处理方法调用的话，比如说常量传播问题，为了安全近似，我们会保守地假设所有的过程调用的结果为 "),l("code",null,"NAC"),i(" ，这样会导致分析结果极其不精确（Imprecision），虽然安全，但是过于保守，近乎无用。")],-1),l("p",null,"因此，我们需要过程间分析，通过过程间的控制流边来传递数据流信息，也就是通过调用边和返回边传递信息。为了能够进行过程间的分析，我们需要一种对于过程间调用关系的表示——调用图。",-1),l("h2",{id:"_5-2-调用图的构建",tabindex:"-1"},[i("5.2 调用图的构建 "),l("a",{class:"header-anchor",href:"#_5-2-调用图的构建","aria-label":'Permalink to "5.2 调用图的构建"'},"​")],-1),l("h3",{id:"_5-2-1-基本概念",tabindex:"-1"},[i("5.2.1 基本概念 "),l("a",{class:"header-anchor",href:"#_5-2-1-基本概念","aria-label":'Permalink to "5.2.1 基本概念"'},"​")],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.3"),l("p",null,[i("调用图是程序中各过程（Procedure）之间调用关系的一种表示，考虑程序中的所有"),l("strong",null,"调用点（Call Site，调用表达式所在的语句）"),i("，所有的从调用点到“"),l("strong",null,"目标方法（Target Method）"),i("——即"),l("strong",null,"被调用者（Callee）"),i("”的边组成的集合为"),l("strong",null,"调用图（Call Graph）"),i("。记程序中所有调用点的集合为 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("msub",null,[l("mi",null,"V"),l("mn",null,"1")])]),l("annotation",{encoding:"application/x-tex"},"V_1")])])]),i(" ，所有的方法的集合为 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("msub",null,[l("mi",null,"V"),l("mn",null,"2")])]),l("annotation",{encoding:"application/x-tex"},"V_2")])])]),i(" ，调用图 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"G")]),l("annotation",{encoding:"application/x-tex"},"G")])])]),i(" 满足 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"G"),l("mo",null,"⊆"),l("msub",null,[l("mi",null,"V"),l("mn",null,"1")]),l("mo",null,"×"),l("msub",null,[l("mi",null,"V"),l("mn",null,"2")])]),l("annotation",{encoding:"application/x-tex"},"G \\subseteq V_1\\times V_2")])])]),i(" 。")])],-1),l("p",null,"比如说考虑下面一个例子：",-1),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    bar"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    baz"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"123"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," bar"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    baz"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"666"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," baz"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," x) { }")])])]),l("button",{class:"collapse"})],-1),l("p",{style:{"text-align":"center"}},[l("img",{src:y,alt:"cg-intro",style:{zoom:"40%"}})],-1),l("p",null,"调用图是非常重要的程序信息，它有很多的应用，比如说：",-1),l("ul",null,[l("li",null,[l("p",null,"过程间分析的基础")]),l("li",null,[l("p",null,"程序优化（Optimization）")]),l("li",null,[l("p",null,"程序理解（Understanting）")]),l("li",null,[l("p",null,"程序调试（Debugging）")]),l("li",null,[l("p",null,"程序测试（Testing）")])],-1),l("p",null,"我们后面聚焦于对面向对象编程语言（Object-Oriented Programming Language，OOPL）的调用图构建，以Java为例，常见的方法有：",-1),l("ul",null,[l("li",null,[l("p",null,"类层级结构分析（Class Hierarchy Analysis，CHA）")]),l("li",null,[l("p",null,"快速类型分析（Rapid Type Analysis，RTA）")]),l("li",null,[l("p",null,"变量类型分析（Variable Type Analysis，VTA）")]),l("li",null,[l("p",null,"指针分析（Pointer Analysis，k-CFA）")])],-1),l("p",null,"上面的四种方法自上而下精度（Precision）越来越高，但是效率（Efficiency）也越来越低。这一章重点讲解类层级结构分析的方法，在后面几章里面会讲解指针分析的方法。",-1),l("h3",{id:"_5-2-2-java中的方法调用",tabindex:"-1"},[i("5.2.2 Java中的方法调用 "),l("a",{class:"header-anchor",href:"#_5-2-2-java中的方法调用","aria-label":'Permalink to "5.2.2 Java中的方法调用"'},"​")],-1),l("p",null,[i("Java中有如下的三种 "),l("strong",null,"方法调用（Method Call / Invocation）"),i(" 类型：")],-1),l("table",null,[l("thead",null,[l("tr",null,[l("th"),l("th",null,"静态调用（Static Call）"),l("th",null,"特殊调用（Special Call）"),l("th",null,"虚调用（Virtual Call）")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("strong",null,"指令")]),l("td",null,[l("code",null,"invokestatic")]),l("td",null,[l("code",null,"invokespecial")]),l("td",null,[l("code",null,"invokeinterface"),i(" ， "),l("code",null,"invokevirtual")])]),l("tr",null,[l("td",null,[l("strong",null,"接收对象（Receiver Object）")]),l("td",null,"无"),l("td",null,"有"),l("td",null,"有")]),l("tr",null,[l("td",null,[l("strong",null,"目标方法")]),l("td",null,"静态方法"),l("td",null,[i("构造函数"),l("br"),i("私有实例方法"),l("br"),i("基类实例方法")]),l("td",null,"其他的实例方法")]),l("tr",null,[l("td",null,[l("strong",null,"目标方法数量")]),l("td",null,"1"),l("td",null,"1"),l("td",null,[l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥"),l("mn",null,"1")]),l("annotation",{encoding:"application/x-tex"},"\\ge 1")])])]),i("（多态-Polymorphism）")])]),l("tr",null,[l("td",null,[l("strong",null,"决定时间（Determinacy）")]),l("td",null,"编译时"),l("td",null,"编译时"),l("td",null,"运行时")])])],-1),l("p",null,"其中我们会发现，静态调用和特殊调用的目标方法确定是平凡的（Trivial），在编译的时候就可以确定下来，真正对我们构造调用图造成挑战的是虚调用，它有不止一个可能的目标方法，到运行时才能完全确定下来，这也是面向对象编程范式的一个特性——多态。因此，我们构建调用图的关键是处理好虚调用。",-1),l("h3",{id:"_5-2-3-虚调用的方法派发",tabindex:"-1"},[i("5.2.3 虚调用的方法派发 "),l("a",{class:"header-anchor",href:"#_5-2-3-虚调用的方法派发","aria-label":'Permalink to "5.2.3 虚调用的方法派发"'},"​")],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.4"),l("p",null,[i("一个方法的 "),l("strong",null,"描述符（Descriptor）"),i(" 由这个方法的 "),l("strong",null,"返回类型（Return Type）"),i(" 和 "),l("strong",null,"形参类型（Parameter Type）"),i(" 组成。")])],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.5"),l("p",null,[i("一个方法的 "),l("strong",null,"签名（Signature）"),i(" 由这个方法所在的 "),l("strong",null,"类名（Class Type）"),i(" ，方法本身的 "),l("strong",null,"方法名（Method Name）"),i(" 以及方法的 "),l("strong",null,"描述符（Descriptor）"),i(" 组成。签名可以用作一个方法的 "),l("strong",null,"标识符（Identifier）"),i(" 。")]),l("p",null,"考虑如下的实例方法："),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," C"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    T "),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(P "),l("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"p"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", Q "),l("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"q"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", R "),l("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"r"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") { ... }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"})]),l("p",null,[i("上述方法的签名为 "),l("code",null,"<C: T foo(P, Q, R)>"),i(" ，其中 "),l("code",null,"C"),i(" 是类名， "),l("code",null,"T"),i(" 是返回类型， "),l("code",null,"(P, Q, R)"),i(" 是形参类型， "),l("code",null,"foo"),i(" 是方法名。在不产生歧义的前提下，方法签名可以简写为 "),l("code",null,"C.foo(P, Q, R)"),i(" 。")])],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.6"),l("p",null,[i("对于某个形如 "),l("code",null,"o.foo()"),i(" 的调用点，记接收对象的类型为 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"c")]),l("annotation",{encoding:"application/x-tex"},"c")])])]),i(" ，方法签名为 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"m")]),l("annotation",{encoding:"application/x-tex"},"m")])])]),i(" ，定义在运行时刻解析调用点所调用的目标方法的过程为"),l("strong",null,"方法派发（Method Dispatch）"),i("，记为")]),l("p",null,[l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mi",null,"D"),l("mi",null,"i"),l("mi",null,"s"),l("mi",null,"p"),l("mi",null,"a"),l("mi",null,"t"),l("mi",null,"c"),l("mi",null,"h"),l("mo",{stretchy:"false"},"("),l("mi",null,"c"),l("mo",{separator:"true"},","),l("mi",null,"m"),l("mo",{stretchy:"false"},")")]),l("annotation",{encoding:"application/x-tex"},"Dispatch(c,m) ")])])])])],-1),l("p",null,"在运行时刻，一个虚调用会基于接受对象的类型以及调用点处的方法签名来解析调用关系，决定具体调用哪个实例方法，解析过程见算法5.1。",-1),l("div",{class:"algorithm"},[l("p",{class:"title"},"算法 5.1 虚调用的方法派发算法"),l("iframe",{src:"/posts/StaticAnalytics/05-inter/method-dispatch-of-virtual-calls.html",frameborder:"no",border:"0",marginwidth:"0",width:"100%",height:"260px",marginheight:"0",scrolling:"auto",style:{"box-shadow":"none"}})],-1),l("p",null,"方法派发的过程简单理解就是从接受对象所在的类开始，按照从子类向到基类的顺序查找，直到找到一个方法名和描述符都相同的非抽象方法为止。",-1),l("p",null,"比如说下面这个例子：",-1),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() { ... }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," C"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() { ... }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"})],-1),l("p",{style:{"text-align":"center"}},[l("img",{src:m,alt:"dispatch",style:{zoom:"40%"}})],-1),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," dispatch"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    A x "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    x."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    A y "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," C"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    y."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"})],-1),l("ul",null,[l("li",null,[l("p",null,[i("对于调用点 "),l("code",null,"x.foo()"),i(" ，我们有 "),l("code",null,"Dispatch(B, A.foo()) = A.foo()"),i(" ；")])]),l("li",null,[l("p",null,[i("对于调用点 "),l("code",null,"y.foo()"),i(" ，我们有 "),l("code",null,"Dispatch(C, A.foo()) = C.foo()"),i(" 。")])])],-1),l("p",null,"其实，Dispatch算法模拟的是实际运行时的动态绑定过程。但是，在静态分析阶段，大部分情况下我们是无法直接获取接收对象的类型的，因为大多数时候，由于控制流的作用，一个调用点可能有不止一种可能的接受对象类型。",-1),l("h3",{id:"_5-2-4-类层级结构分析",tabindex:"-1"},[i("5.2.4 类层级结构分析 "),l("a",{class:"header-anchor",href:"#_5-2-4-类层级结构分析","aria-label":'Permalink to "5.2.4 类层级结构分析"'},"​")],-1),l("h4",{id:"解析算法",tabindex:"-1"},[i("解析算法 "),l("a",{class:"header-anchor",href:"#解析算法","aria-label":'Permalink to "解析算法"'},"​")],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.7"),l("p",null,[i("通过查找类的层级结构来解析目标方法的过程，称之为"),l("strong",null,"类层级结构分析（Class Hierarchy Analysis，CHA）"),i("。其解析算法见算法5.2。CHA满足如下的一些描述：")]),l("ul",null,[l("li",null,[l("p",null,"CHA需要知道整个程序的类之间的继承关系，也就是层级结构；")]),l("li",null,[l("p",null,[i("CHA会根据调用点处的"),l("strong",null,"接收变量（Receiver Variable）"),i(" 的 "),l("strong",null,"声明类型（Declare Type）"),i(" 来解析虚调用；")])]),l("li",null,[l("p",null,[i("CHA假设声明类型为 "),l("code",null,"A"),i(" 的接收变量 "),l("code",null,"a"),i(" 可能会指向 "),l("code",null,"A"),i(" 类以及 "),l("code",null,"A"),i(" 的所有 "),l("strong",null,"子类（Subclass）"),i(" 的对象。")])])])],-1),l("div",{class:"algorithm"},[l("p",{class:"title"},"算法5.2 CHA的调用解析（Call Resolution）算法"),l("iframe",{src:"/posts/StaticAnalytics/05-inter/call-resolution-of-cha.html",frameborder:"no",border:"0",marginwidth:"0",width:"100%",height:"465px",marginheight:"0",scrolling:"auto",style:{"box-shadow":"none"}})],-1),l("blockquote",null,[l("p",null,[i("需要注意的是，当我们说 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"c")]),l("annotation",{encoding:"application/x-tex"},"c")])])]),i(" 的子类的时候，包括 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"c")]),l("annotation",{encoding:"application/x-tex"},"c")])])]),i(" 的直接子类和间接子类。")])],-1),l("p",null,"CHA的调用解析算法处理虚调用的方式是暴力的枚举，将变量声明类型及其子类中所有和调用点处签名匹配的方法都视为可能的目标方法。",-1),l("p",null,[i("其中需要说明的是，因为特殊方法除了构造函数、私有实例方法之外，还包括基类的实例方法，而到底调用的是哪个基类的实例方法，需要通过 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"D"),l("mi",null,"i"),l("mi",null,"s"),l("mi",null,"p"),l("mi",null,"a"),l("mi",null,"t"),l("mi",null,"c"),l("mi",null,"h"),l("mo",{stretchy:"false"},"("),l("msup",null,[l("mi",null,"c"),l("mi",null,"m")]),l("mo",{separator:"true"},","),l("mi",null,"m"),l("mo",{stretchy:"false"},")")]),l("annotation",{encoding:"application/x-tex"},"Dispatch(c^m, m)")])])]),i(" 才能查到。")],-1),l("p",null,"下面我们通过一个例子来理解一下这个算法对于虚调用的处理过程 ：",-1),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() { ... }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { }")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," C"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() { ... }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," D"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() { ... }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"})],-1),l("p",{style:{"text-align":"center"}},[l("img",{src:F,alt:"cha-eg",style:{zoom:"40%"}})],-1),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," resolve"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    C c "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ...;")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    c."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    A a "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ...;")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    a."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    B b "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    b."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"})],-1),l("p",null,"算法会对于每一个接收变量的声明类型本身及其子类关于调用点处的函数签名进行方法派发的操作，将所有找到的目标方法加入结果之中。因此",-1),l("ul",null,[l("li",null,[l("p",null,[l("code",null,"Resolve(c.foo()) = {C.foo()}"),i(" ；")])]),l("li",null,[l("p",null,[l("code",null,"Resolve(a.foo()) = {A.foo(), C.foo(), D.foo()}"),i(" ；")])]),l("li",null,[l("p",null,[l("code",null,"Resolve(b.foo()) = {A.foo(), C.foo(), D.foo()}"),i(" ；")])])],-1),l("p",null,[i("其中，我们需要注意一下的是第三个调用点， "),l("code",null,"A.foo()"),i(" 也在其结果之内，因为对于 "),l("code",null,"B"),i(" 类本身的方法派发得到的结果是 "),l("code",null,"A.foo()"),i(" 。")],-1),l("p",null,[i("并且，CHA的Resolve算法只关心声明类型，因此 "),l("code",null,"new B()"),i(" 其实并没有在算法中发挥作用，从而我们 "),l("code",null,"Resolve(b.foo())"),i(" 产生了两个虚假（Spurious）的目标调用 "),l("code",null,"C.foo()"),i(" 和 "),l("code",null,"D.foo()"),i(" 。")],-1),l("h4",{id:"特点",tabindex:"-1"},[i("特点 "),l("a",{class:"header-anchor",href:"#特点","aria-label":'Permalink to "特点"'},"​")],-1),l("ul",null,[l("li",null,[l("p",null,"优点：快"),l("ul",null,[l("li",null,[l("p",null,"只考虑了调用点处接收对象的声明类型及其继承结构")]),l("li",null,[l("p",null,"忽略数据流和控制流信息")])])]),l("li",null,[l("p",null,"缺点：不精确"),l("ul",null,[l("li",null,"很容易引入虚假的目标方法")])])],-1),l("blockquote",null,[l("p",null,"之后的指针分析会处理不精确的问题。")],-1),l("h4",{id:"应用",tabindex:"-1"},[i("应用 "),l("a",{class:"header-anchor",href:"#应用","aria-label":'Permalink to "应用"'},"​")],-1),l("p",null,"CHA的常见应用是在IDE中帮助程序员查看调用点处可能的目标方法，因为IDE只是给程序员一个提示，所以只需要保证不发生错误，对于精确性要求不高。",-1),l("p",{style:{"text-align":"center"}},[l("img",{src:C,alt:"cha-ap",style:{zoom:"40%"}})],-1),l("p",null,"比如说IntelliJ IDEA就是用 CHA 算法帮助程序员分析目标调用的。",-1),l("h3",{id:"_5-2-5-通过cha构建调用图",tabindex:"-1"},[i("5.2.5 通过CHA构建调用图 "),l("a",{class:"header-anchor",href:"#_5-2-5-通过cha构建调用图","aria-label":'Permalink to "5.2.5 通过CHA构建调用图"'},"​")],-1),l("p",null,"通过CHA构建整个程序调用图的基本过程为：",-1),l("ul",null,[l("li",null,[l("p",null,"从入口方法开始（通常为main方法）；")]),l("li",null,[l("p",null,[i("对于每个可达的方法 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"m")]),l("annotation",{encoding:"application/x-tex"},"m")])])]),i(" ，通过CHA解析 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"m")]),l("annotation",{encoding:"application/x-tex"},"m")])])]),i(" 中的每个调用点"),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"c"),l("mi",null,"s")]),l("annotation",{encoding:"application/x-tex"},"cs")])])]),i("的目标方法，即 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"R"),l("mi",null,"e"),l("mi",null,"s"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"v"),l("mi",null,"e"),l("mo",{stretchy:"false"},"("),l("mi",null,"c"),l("mi",null,"s"),l("mo",{stretchy:"false"},")")]),l("annotation",{encoding:"application/x-tex"},"Resolve(cs)")])])]),i(" ；")])]),l("li",null,[l("p",null,"重复上述过程，直到没有发现新的方法为止。")])],-1),l("div",{class:"algorithm"},[l("p",{class:"title"},"算法5.3 调用图构建（Call Graph Construction）算法"),l("iframe",{src:"/posts/StaticAnalytics/05-inter/call-graph-construction.html",frameborder:"no",border:"0",marginwidth:"0",width:"100%",height:"480px",marginheight:"0",scrolling:"auto",style:{"box-shadow":"none"}})],-1),l("p",null,"我们可以通过下面的例子来直观的感受一下算法的运行过程。",-1),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    static"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," main"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        A."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    static"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        A a "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        a."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"bar"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," bar"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        C c "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," C"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        c."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"bar"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," bar"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() { }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," C"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," bar"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        if"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (...) {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            A."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"foo"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," m"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() { }")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"})],-1),l("p",{style:{"text-align":"center"}},[l("img",{src:v,alt:"cgc-eg",style:{zoom:"30%"}})],-1),l("p",null,[i("在上述例子当中需要注意的是，虽然 "),l("code",null,"A a = new A()"),i(" ，但是解析 "),l("code",null,"a.bar()"),i(" 的目标方法时候，依旧会对 "),l("code",null,"A"),i(" 以及 "),l("code",null,"A"),i(" 的所有子类作 "),l("span",{class:"katex"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"D"),l("mi",null,"i"),l("mi",null,"s"),l("mi",null,"p"),l("mi",null,"a"),l("mi",null,"t"),l("mi",null,"c"),l("mi",null,"h")]),l("annotation",{encoding:"application/x-tex"},"Dispatch")])])]),i(" ，故而会有3条从 "),l("code",null,"a.bar()"),i(" 出发的边。")],-1),l("p",null,[i("最后我们会发现存在一个不可达的方法（Unreachable Method） "),l("code",null,"C.m()"),i(" ，那么这个方法中的代码就是死代码（Dead Code，即在任何情况下控制流都不能到达的代码）。")],-1),l("h2",{id:"_5-3-过程间控制流图",tabindex:"-1"},[i("5.3 过程间控制流图 "),l("a",{class:"header-anchor",href:"#_5-3-过程间控制流图","aria-label":'Permalink to "5.3 过程间控制流图"'},"​")],-1),l("p",null,"CFG代表了一个独立方法的控制流结构，类似的，我们可以用ICFG（Interprocedural Control Flow Graph）来代表整个程序的控制流结构。有了ICFG，我们就可以用分析CFG的方式来分析整个程序。",-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.8"),l("p",null,[i("定义一个程序的 "),l("strong",null,"过程间控制流图（Interprocedural Control Flow Graph，ICFG）"),i(" 由两个部分组成：")]),l("ul",null,[l("li",null,[l("p",null,[i("程序中所有方法的控制流图，其中的边称为"),l("strong",null,"CFG边（CFG Edge）"),i("；")])]),l("li",null,[l("p",null,"两种额外的边："),l("ul",null,[l("li",null,[l("p",null,[l("strong",null,"调用边（Call Edge）"),i("：从调用点（Call Site）到调用点对应的被调用者（Callee）的入口结点（Entry Node）的边；")])]),l("li",null,[l("p",null,[l("strong",null,"返回边（Return Edge）"),i("：从被调用者的出口结点（Exit Node）到 "),l("strong",null,"返回点（Return Site, 控制流中紧接着调用点的语句）"),i(" 的边。")])])])])])],-1),l("p",null,[i("简单理解， "),l("code",null,"ICFG = CFG + call & return edges"),i(" ，连接调用边和返回边的信息可以从调用图中获得。因此，过程间控制流图的精度取决于调用图的精度。")],-1),l("p",null,"我们可以通过一个例子来更直观的理解一下上面的定义。",-1),l("div",{class:"language-java vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"static"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," main"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    int"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a, b, c;")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    a "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 6"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    b "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," addOne"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(a);")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    c "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," b "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"-"),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 3"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    b "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," ten"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    c "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," b;")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"static"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," int"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," addOne"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    int"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," y "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," x "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    return"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," y;")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),l("span",{class:"line"}),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"static"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," int"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," ten"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    return"),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),i(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"})],-1),l("p",{style:{"text-align":"center"}},[l("img",{src:f,alt:"icfg-eg",style:{zoom:"30%"}})],-1),l("p",null,"其中，有一种边会有些疑惑，就是从调用点到返回点的边，控制流并不会从这条边走，但是我们的图中需要这条边，因为方法调用具有独立性，有一些信息，没必要进入方法体的内部（比如说除了参数以外的其他变量的信息），可以直接从外面的这条边传递，能够提高效率。",-1),l("blockquote",null,[l("p",null,"虽然进入方法体多走几步也是可以的，但这会降低效率。")],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.9"),l("p",null,[i("CFG边中从调用点到对应返回点的边称为"),l("strong",null,"调用-返回边（Call-to-return edges）"),i("，除此之外的边称为"),l("strong",null,"普通边（Normal Edges）"),i("。")])],-1),l("p",null,[i("简单理解， "),l("code",null,"CFG Edges = Call-to-return Edges + Normal Edges"),i(" 。调用-返回边相当于为子过程不需要用到的外部状态提供了一条传播的捷径。")],-1),l("blockquote",null,[l("p",null,"例如，常量传播问题当中，一个调用点处一般只有接收方法调用返回值的那个变量会发生变化，除此之外的本地变量并不会发生变化，我们可以将这些本地变量沿着调用-返回边传递到下一个结点，方法调用的返回值则由返回边传递。")],-1),l("h2",{id:"_5-4-过程间数据流分析",tabindex:"-1"},[i("5.4 过程间数据流分析 "),l("a",{class:"header-anchor",href:"#_5-4-过程间数据流分析","aria-label":'Permalink to "5.4 过程间数据流分析"'},"​")],-1),l("h3",{id:"_5-4-1-过程间与过程内数据流分析的区别",tabindex:"-1"},[i("5.4.1 过程间与过程内数据流分析的区别 "),l("a",{class:"header-anchor",href:"#_5-4-1-过程间与过程内数据流分析的区别","aria-label":'Permalink to "5.4.1 过程间与过程内数据流分析的区别"'},"​")],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.10"),l("p",null,[i("我们将基于CFG分析单个方法内部的数据流分析称为 "),l("strong",null,"过程内数据流分析（Intraprocedural Data-Flow Analysis）"),i(" ，将基于ICFG分析整个程序的数据流分析称为 "),l("strong",null,"过程间数据流分析（Interprocedural Data-Flow Analysis）"),i(" 。")])],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.11"),l("p",null,[i("定义数据流沿着ICFG中的边转移的过程为"),l("strong",null,"边转移（Edge Transfer）"),i("，包括：")]),l("ul",null,[l("li",null,[l("p",null,[l("strong",null,"普通边转移（Normal Edge Transfer）"),i("：数据流沿着某个方法的CFG中的边的转移函数；")])]),l("li",null,[l("p",null,[l("strong",null,"调用-返回边转移（Call-Return Edge Transfer）"),i("：数据流从调用点沿着调用-返回边到返回点的转移函数；")])]),l("li",null,[l("p",null,[l("strong",null,"调用边转移（Call Edge Transfer）"),i("：数据流从调用点（见定义5.3）沿着调用边转移到被调用者的入口结点的转移函数；")])]),l("li",null,[l("p",null,[l("strong",null,"返回边转移（Return Edge Transfer）"),i("：数据流从被调用者的出口结点沿着返回边转移到返回点（见定义5.8）的转移函数。")])])])],-1),l("blockquote",null,[l("p",null,"这里转移函数可视为边的状态转移方程（见定义3.7）。")],-1),l("div",{class:"definition"},[l("p",{class:"title"},"定义5.12"),l("p",null,[i("称CFG中结点所对应的状态转移方程（见定义3.7）为 "),l("strong",null,"结点转移（Node Transfer），"),i(" 包括：")]),l("ul",null,[l("li",null,[l("p",null,[l("strong",null,"调用结点转移（Call Node Transfer）"),i("：调用点对应的结点的状态转移方程；")])]),l("li",null,[l("p",null,[l("strong",null,"其他结点转移（Other Node Transfer）"),i("：调用点以外的其他结点的状态转移方程。")])])])],-1),l("p",null,"过程间数据流分析和过程内数据流分析的对比如下：",-1),l("table",null,[l("thead",null,[l("tr",null,[l("th",{style:{"text-align":"center"}}),l("th",{style:{"text-align":"center"}},"过程内数据流分析"),l("th",{style:{"text-align":"center"}},"过程间数据流分析")])]),l("tbody",null,[l("tr",null,[l("td",{style:{"text-align":"center"}},[l("strong",null,"程序表示")]),l("td",{style:{"text-align":"center"}},[l("code",null,"CFG")]),l("td",{style:{"text-align":"center"}},[l("code",null,"ICFG = CFGs + call & return Edges")])]),l("tr",null,[l("td",{style:{"text-align":"center"}},[l("strong",null,"转移函数")]),l("td",{style:{"text-align":"center"}},"结点转移"),l("td",{style:{"text-align":"center"}},"结点转移 + 边转移")])])],-1),l("h3",{id:"_5-4-2-过程间常量传播",tabindex:"-1"},[i("5.4.2 过程间常量传播 "),l("a",{class:"header-anchor",href:"#_5-4-2-过程间常量传播","aria-label":'Permalink to "5.4.2 过程间常量传播"'},"​")],-1),l("p",null,"下面我们以常量传播为例，走一遍过程间数据流分析的基本步骤。",-1),l("h4",{id:"转移函数",tabindex:"-1"},[i("转移函数 "),l("a",{class:"header-anchor",href:"#转移函数","aria-label":'Permalink to "转移函数"'},"​")],-1),l("ul",null,[l("li",null,[l("p",null,"结点转移："),l("ul",null,[l("li",null,[l("p",null,"调用结点转移：恒等函数（Identity Function，即直接将输入当输出返回的函数）；"),l("ul",null,[l("li",null,"调用点左值变量留给调用-返回边处理；")])]),l("li",null,[l("p",null,"其他结点转移：和过程内的常量传播一致（见4.6.2）；")])])]),l("li",null,[l("p",null,"边转移："),l("ul",null,[l("li",null,[l("p",null,"普通边：恒等函数")]),l("li",null,[l("p",null,[i("调用-返回边：消除调用点的 "),l("strong",null,"左值变量（Left-hand-side Variable, LHS Variable）"),i(" 的值，传播其他本地变量的值；")])]),l("li",null,[l("p",null,"调用边：传递参数值；")]),l("li",null,[l("p",null,"返回边：传递返回值。")])])])],-1),l("h4",{id:"例子",tabindex:"-1"},[i("例子 "),l("a",{class:"header-anchor",href:"#例子","aria-label":'Permalink to "例子"'},"​")],-1),l("p",null,"沿用上一个例子（见第3节）的代码，分析过程及结果如下。",-1),l("p",{style:{"text-align":"center"}},[l("img",{src:A,alt:"ipa-eg",style:{zoom:"40%"}})],-1),l("p",null,[i("这里再解释一下调用-返回边的作用，以上面那条调用返回边为例。通过这条调用返回边，我们可以将本地变量 "),l("code",null,"a = 6"),i(" 的数据流信息传递到下一个结点，如果没有这条边的话，我们需要在 "),l("code",null,"addOne"),i(" 的CFG中一直维护着 "),l("code",null,"a = 6"),i(" 这条数据，这是十分低效的。")],-1),l("p",null,"在这个例子中，如果我们只运用过程内分析的做法，对所有的调用作最保守的假设，那么我们最终得到的结果会是这样的：",-1),l("p",{style:{"text-align":"center"}},[l("img",{src:b,alt:"pa-eg",style:{zoom:"40%"}})],-1),l("p",null,"从上面两种结果的对比中，我们会发现：",-1),l("div",{class:"conclusion"},[l("p",{class:"title"},"结论5.1"),l("p",null,"过程间常量传播分析比过程内常量传播分析精确得多。")],-1),l("h2",{id:"_5-5-自检问题",tabindex:"-1"},[i("5.5 自检问题 "),l("a",{class:"header-anchor",href:"#_5-5-自检问题","aria-label":'Permalink to "5.5 自检问题"'},"​")],-1),l("ol",null,[l("li",null,[l("p",null,"如何通过类层级结构分析（Class Hierarchy Analysis, CHA）来构建调用图（Call Graph）？")]),l("li",null,[l("p",null,"如何理解过程间控制流图（Interprocedural Control-Flow Graph, ICFG）的概念？")]),l("li",null,[l("p",null,"如何理解过程间数据流分析（Interprocedural Data-Flow Analysis, IDFA）的概念？")]),l("li",null,[l("p",null,"如何进行过程间常量传播（Interprocedural Constant Propagation）分析？")])],-1),l("div",{class:"tip custom-block"},[l("p",{class:"custom-block-title"},[l("span",{lang:"en"},"作业布置"),l("span",{lang:"zh-CN"},"作业布置")]),l("p",null,[i("到此为止，读者已经具备了完成"),l("a",{href:"https://tai-e.pascal-lab.net/pa4.html",target:"_blank",rel:"noreferrer"},"作业 4：类层次结构分析与过程间常量传播"),i("所需的全部理论知识。")])],-1)])),"main-header":s(()=>[n(a.$slots,"main-header")]),"main-header-after":s(()=>[n(a.$slots,"main-header-after")]),"main-nav":s(()=>[n(a.$slots,"main-nav")]),"main-content":s(()=>[n(a.$slots,"main-content")]),"main-content-after":s(()=>[n(a.$slots,"main-content-after")]),"main-nav-before":s(()=>[n(a.$slots,"main-nav-before")]),"main-nav-after":s(()=>[n(a.$slots,"main-nav-after")]),comment:s(()=>[n(a.$slots,"comment")]),footer:s(()=>[n(a.$slots,"footer")]),aside:s(()=>[n(a.$slots,"aside")]),"aside-custom":s(()=>[n(a.$slots,"aside-custom")]),default:s(()=>[n(a.$slots,"default")]),_:3},8,["frontmatter"])}}};export{R as default};
