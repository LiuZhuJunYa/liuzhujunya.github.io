import{_ as d}from"./ValaxyMain.vue_vue_type_style_index_0_lang-Bn109ln0.js";import{c as o,w as l,f as g,a as c,p as r,o as u,g as i,h as s,r as n}from"./app-DvGICojQ.js";import"./YunFooter.vue_vue_type_style_index_0_lang-6I6EwKPx.js";import"./YunCard.vue_vue_type_script_setup_true_lang-G2SLBOpE.js";import"./index-C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-B-GmT0Fn.js";import"./post-JeTKiWMk.js";const y="/assets/bug-CfmKAgY8.png",F="/assets/safe-D6Vt06LE.png",m="/assets/reflection-BDSmND7B.png",v="/assets/reflection2-BHZJ-sF8.png",b="/assets/jni-BOZcL0kF.png",f="/assets/arraycopy-ClOuDgL0.png",P={__name:"20240810 12 完全性与近似完全性",setup(C,{expose:p}){const t=JSON.parse('{"title":"12 完全性与近似完全性","description":"","frontmatter":{"title":"12 完全性与近似完全性","date":"2024-08-10T00:00:00.000Z","tags":["静态代码分析"],"categories":["静态代码分析"]},"headers":[{"level":2,"title":"12.1 完全性和近似完全性的概念","slug":"_12-1-完全性和近似完全性的概念","link":"#_12-1-完全性和近似完全性的概念","children":[{"level":3,"title":"12.1.1 完全性的现实困境","slug":"_12-1-1-完全性的现实困境","link":"#_12-1-1-完全性的现实困境","children":[]},{"level":3,"title":"12.1.2 近似完全性","slug":"_12-1-2-近似完全性","link":"#_12-1-2-近似完全性","children":[]}]},{"level":2,"title":"12.2 难语言特性举隅1：Java反射","slug":"_12-2-难语言特性举隅1-java反射","link":"#_12-2-难语言特性举隅1-java反射","children":[{"level":3,"title":"12.2.1 基本概念","slug":"_12-2-1-基本概念","link":"#_12-2-1-基本概念","children":[]},{"level":3,"title":"12.2.2 动机","slug":"_12-2-2-动机","link":"#_12-2-2-动机","children":[]},{"level":3,"title":"12.2.3 一些处理思路","slug":"_12-2-3-一些处理思路","link":"#_12-2-3-一些处理思路","children":[]}]},{"level":2,"title":"12.3 难语言特性举隅2：原生代码","slug":"_12-3-难语言特性举隅2-原生代码","link":"#_12-3-难语言特性举隅2-原生代码","children":[{"level":3,"title":"12.3.1 Java原生接口","slug":"_12-3-1-java原生接口","link":"#_12-3-1-java原生接口","children":[]},{"level":3,"title":"12.3.2 原生代码难分析的原因","slug":"_12-3-2-原生代码难分析的原因","link":"#_12-3-2-原生代码难分析的原因","children":[]},{"level":3,"title":"12.3.3 一些处理思路","slug":"_12-3-3-一些处理思路","link":"#_12-3-3-一些处理思路","children":[]}]},{"level":2,"title":"12.4 自检问题","slug":"_12-4-自检问题","link":"#_12-4-自检问题","children":[]}],"relativePath":"pages/posts/静态代码分析/20240810 12 完全性与近似完全性/20240810 12 完全性与近似完全性.md","path":"/home/runner/work/LiuZhuJunYa.github.io/LiuZhuJunYa.github.io/pages/posts/静态代码分析/20240810 12 完全性与近似完全性/20240810 12 完全性与近似完全性.md","lastUpdated":1731428437000}'),h=c(),e=t.frontmatter||{};return h.meta.frontmatter=Object.assign(h.meta.frontmatter||{},t.frontmatter||{}),r("pageData",t),r("valaxy:frontmatter",e),globalThis.$frontmatter=e,p({frontmatter:{title:"12 完全性与近似完全性",date:"2024-08-10T00:00:00.000Z",tags:["静态代码分析"],categories:["静态代码分析"]}}),(a,k)=>{const E=d;return u(),o(E,{frontmatter:g(e)},{"main-content-md":l(()=>k[0]||(k[0]=[i("p",null,[s("原文链接："),i("a",{href:"https://static-analysis.cuijiacai.com/12-soundiness/",target:"_blank",rel:"noreferrer"},"https://static-analysis.cuijiacai.com/12-soundiness/")],-1),i("h1",{id:"_12-完全性与近似完全性",tabindex:"-1"},[s("12 完全性与近似完全性 "),i("a",{class:"header-anchor",href:"#_12-完全性与近似完全性","aria-label":'Permalink to "12 完全性与近似完全性"'},"​")],-1),i("h2",{id:"_12-1-完全性和近似完全性的概念",tabindex:"-1"},[s("12.1 完全性和近似完全性的概念 "),i("a",{class:"header-anchor",href:"#_12-1-完全性和近似完全性的概念","aria-label":'Permalink to "12.1 完全性和近似完全性的概念"'},"​")],-1),i("h3",{id:"_12-1-1-完全性的现实困境",tabindex:"-1"},[s("12.1.1 完全性的现实困境 "),i("a",{class:"header-anchor",href:"#_12-1-1-完全性的现实困境","aria-label":'Permalink to "12.1.1 完全性的现实困境"'},"​")],-1),i("p",null,"其实完全性（Soundness）我们在定义1.2中已经定义过了，简单来说就是需要过近似（Over-Approximation），具有完全性的静态分析应当能够捕捉到所有的程序行为，或者说该分析应当模拟出程序所有可能的执行状态，给出最保守的结果。",-1),i("p",null,"那么我们能够对于实际应用中的程序达到一个完全完全（Sound）的分析么？",-1),i("ul",null,[i("li",null,[i("p",null,"从学术界的角度来讲，几乎所有发表的全程序分析当应用到现实中广泛应用的编程语言以及程序的时候都是不完全（unsound）的。")]),i("li",null,[i("p",null,"从产业界的角度来说，几乎所有的现实中的全程序静态分析工具（比如说bug检测，安全分析等等）都不得不做出一些不完全（undound）的选择。")])],-1),i("p",null,"那这是为什么呢？这是因为现代的编程语言有一些对于静态分析来说难的语言特性。",-1),i("p",null,"比如说，下面是一些对于静态分析来说难的语言特性的例子：",-1),i("ul",null,[i("li",null,[i("p",null,"Java"),i("ul",null,[i("li",null,"反射（Reflection），原生代码（Native Code），动态类加载（Dynamic Class Loading）…")])]),i("li",null,[i("p",null,"JavaScript"),i("ul",null,[i("li",null,"检测（Eval），文档对象模型（Document Object Model, DOM）…")])]),i("li",null,[i("p",null,"C/C++"),i("ul",null,[i("li",null,"指针运算（Pointer Arithmetic），函数指针（Functions Pointers）…")])])],-1),i("div",{class:"definition"},[i("p",{class:"title"},"定义12.1"),i("p",null,[s("对于静态分析来说， "),i("strong",null,"难分析的特性（Hard-to-analyze Features）"),s(" 或者简称 "),i("strong",null,"难的特性（Hard Feature）"),s(" 是指：对这些特性进行激进的保守处理（即完全的过近似）可能会使分析过于不精确而无法扩展（scale），从而使分析变得无用。")])],-1),i("p",null,"于是，",-1),i("ul",null,[i("li",null,[i("p",null,"一般来说，声称自己完全的静态分析，在它的实现中只是尽可能有一个完全的核心（sound core）"),i("ul",null,[i("li",null,[i("p",null,"也就是说，对于大部分的语言特性作过近似（见定义1.3）")]),i("li",null,[i("p",null,"对于一些特定的，或者难的特性作欠近似（见定义1.4）")])])]),i("li",null,[i("p",null,"在论文的一些实现或者评估（Evaluation）的部分中，对难的语言特性的处理通常被省略或仅以一种比较水的方式提及一下；")]),i("li",null,[i("p",null,"但对于一些特定的难的语言特性（比如说Java反射）没有合适的处理的话，对于分析的结果会有举足轻重的影响。")])],-1),i("p",null,"并且，在论文中声称完全性可能会误导读者：",-1),i("ul",null,[i("li",null,[i("p",null,"对于非专家的读者来说，他们可能会错误地认为分析的结果是完全的，并且自信地依赖于分析结果；")]),i("li",null,[i("p",null,"对于专家来说，没有一个关于如何处理重要且难的语言特性的清晰解释，想要解释分析结果（比如说告诉我们这个分析到底有多完全、多块、多精确）也是很难的。")])],-1),i("h3",{id:"_12-1-2-近似完全性",tabindex:"-1"},[s("12.1.2 近似完全性 "),i("a",{class:"header-anchor",href:"#_12-1-2-近似完全性","aria-label":'Permalink to "12.1.2 近似完全性"'},"​")],-1),i("p",null,[s("于是，程序分析领域的一些前辈和大佬在 2015 年的 ACM 通讯上发表了一份"),i("a",{href:"/Soundiness-CACM.pdf"},"宣言"),s("，提出了近似完全性（Soundiness）这个概念。")],-1),i("div",{class:"definition"},[i("p",{class:"title"},"定义12.2"),i("p",null,[s("一个 "),i("strong",null,"近似完全的（soundy）"),s(" 静态分析通常意味着这个分析大多数时候是完全的，并且对于进行了不完全处理的难的或者特定的语言特性有着良好的标注和说明。 称一个近似完全的静态分析具有 "),i("strong",null,"近似完全性（Soundiness）"),s(" 。")])],-1),i("p",null,"总的来说，我们可以有如下的结论：",-1),i("div",{class:"conclusion"},[i("p",{class:"title"},"结论12.1"),i("p",null,"完全性、近似完全性与不完全性："),i("ul",null,[i("li",null,[i("p",null,[s("一个 "),i("strong",null,"完全的（sound）"),s(" 静态分析需要捕捉到程序所有的动态行为；")])]),i("li",null,[i("p",null,[s("一个 "),i("strong",null,"近似完全的（soundy）"),s(" 静态分析致力于捕捉到程序所有的动态行为，但是对于特定的难的语言特性进行了不完全的处理，且这种不完全的处理是有原因的；")])]),i("li",null,[i("p",null,[s("一个 "),i("strong",null,"不完全（unsound）"),s(" 静态分析在其设计当中故意地忽略了一些特定的行为，从而去换取更高的效率、精度或者可访问性。")])])])],-1),i("h2",{id:"_12-2-难语言特性举隅1-java反射",tabindex:"-1"},[s("12.2 难语言特性举隅1：Java反射 "),i("a",{class:"header-anchor",href:"#_12-2-难语言特性举隅1-java反射","aria-label":'Permalink to "12.2 难语言特性举隅1：Java反射"'},"​")],-1),i("h3",{id:"_12-2-1-基本概念",tabindex:"-1"},[s("12.2.1 基本概念 "),i("a",{class:"header-anchor",href:"#_12-2-1-基本概念","aria-label":'Permalink to "12.2.1 基本概念"'},"​")],-1),i("p",null,"Java反射是一种公认的静态分析难的问题，是一种静态分析中臭名昭著的Java特性。",-1),i("p",null,"那什么是Java反射呢？",-1),i("div",{class:"definition"},[i("p",{class:"title"},"定义12.3"),i("p",null,[i("strong",null,"反射（Reflection）"),s(" 是Java编程语言中的一个特性。它允许正在执行的Java程序检查或“自省”自身，并操纵程序的内部属性。")])],-1),i("p",null,"例如，Java 类可以获取其所有成员的名称并显示它们。",-1),i("p",null,"比如说，一般的Java程序会这么写：",-1),i("div",{class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Person"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    String name;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," setName"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(String "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"nm"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") { ... }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Person p "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Person"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"p."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setName"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"John"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"p.name "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "BearSir"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"String s "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," p.name;")])])]),i("button",{class:"collapse"})],-1),i("p",null,[s("其中，"),i("code",null,"class"),s(" 、 "),i("code",null,"name"),s(" 、 "),i("code",null,"field"),s(" 是语言内部的属性，主要表现为这个语言的关键字或者和语法（调用表达式、点表达式等等），是一些编译时的东西，在运行时的阶段我们无法访问，就像一个函数没办法访问函数自己的名字，一个类没办法访问这个类自己的或者类中某个属性的名字一样。")],-1),i("p",null,[s("而Java反射为这些程序的内部属性提供了一些访问和使用的接口，称为 "),i("strong",null,"元对象（Metaobject）"),s(" ，我们可以借助反射在运行时访问到编译时的程序的内部属性，像编译时写代码一样，在运行时操作这些内部属性。")],-1),i("p",null,"例如，上述程序对应的Java反射写法如下：",-1),i("div",{class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Class c "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Class."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"forName"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"Person"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Method m "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," c."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getMethod"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"setName"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Field f "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," c."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getField"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Object p "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," c."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"newInstance"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"m."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"invoke"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(p, "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"John"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"f."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(p, "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"BearSir"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"String s "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (String)f."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(p);")])])]),i("button",{class:"collapse"})],-1),i("p",null,"引入Java反射机制是为了在大型程序开发的过程中降低程序的耦合性，使得程序易于拓展、修改和维护。",-1),i("h3",{id:"_12-2-2-动机",tabindex:"-1"},[s("12.2.2 动机 "),i("a",{class:"header-anchor",href:"#_12-2-2-动机","aria-label":'Permalink to "12.2.2 动机"'},"​")],-1),i("p",null,"那么我们为什么要分析Java反射呢？下面举两个例子来说明。",-1),i("p",null,"第一点：全程序、过程间的分析很多时候是避不开反射的，比如说在做bug检测（Bug Detection）或者安全性分析（Security Analysis）的时候。而Java反射除了反射函数本身之外，还会产生别的新的过程间的控制流边（调用边、返回边），而这些边会大大影响全程序分析的结果。",-1),i("p",{style:{"text-align":"center"}},[i("img",{src:y,alt:"bug",style:{zoom:"40%"}})],-1),i("p",null,"第二点：Java反射会修改程序的内部属性，从而产生一些副作用，这也是不能忽略的。特别是在做一些验证（Verification）或者优化（Optimization）的时候，如果忽略了反射机制的副作用，就会导致不安全或者错误的结果。",-1),i("p",{style:{"text-align":"center"}},[i("img",{src:F,alt:"safe",style:{zoom:"15%"}})],-1),i("h3",{id:"_12-2-3-一些处理思路",tabindex:"-1"},[s("12.2.3 一些处理思路 "),i("a",{class:"header-anchor",href:"#_12-2-3-一些处理思路","aria-label":'Permalink to "12.2.3 一些处理思路"'},"​")],-1),i("p",null,"常见的处理Java反射的处理思路有：",-1),i("ul",null,[i("li",null,[i("p",null,"字符串常量分析 + 指针分析"),i("blockquote",null,[i("p",null,"Reflection Analysis for Java (APLAS 2005) Benjamin Livshits, John Whaley, Monica S. Lam. Stanford University")])]),i("li",null,[i("p",null,"类型接口 + 字符串分析 + 指针分析"),i("blockquote",null,[i("p",null,"Self-Inferencing Reflection Resolution for Java (ECOOP 2014) Yue Li, Tian Tan, Yulei Sui, Jingling Xue. UNSW Sydney")])]),i("li",null,[i("p",null,"辅以动态分析"),i("blockquote",null,[i("p",null,"Taming reflection: Aiding static analysis in the presence of reflection and custom class loaders (ICSE 2011) Eric Bodden, Andreas Sewe, Jan Sinschek, Hela Oueslati, Mira Mezini. Technische Universität Darmstadt")])])],-1),i("h4",{id:"思路1-字符串常量分析-指针分析",tabindex:"-1"},[s("思路1: 字符串常量分析 + 指针分析 "),i("a",{class:"header-anchor",href:"#思路1-字符串常量分析-指针分析","aria-label":'Permalink to "思路1: 字符串常量分析 + 指针分析"'},"​")],-1),i("p",null,"这是一个最直接的思路，反射机制通过字符串来获取元对象，如果我们能够分析出这个字符串是啥，就可以根据反射函数的语义去推导出它获取的是哪一个类、方法或者字段的元对象了。",-1),i("div",{class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"String cName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "Person"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"String mName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "setName"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"String fName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"... ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Class c "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Class."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"forName"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(cName);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Method m "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," c."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getMethod"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(mName, ...);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Field f "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," c."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getField"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(fName);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"... ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"m."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"invoke"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(p, ...);")])])]),i("button",{class:"collapse"})],-1),i("p",null,"但是字符串不一定是明晃晃的常量，也有可能是：",-1),i("ul",null,[i("li",null,[i("p",null,"从配置文件（Configuration Files）中获取的；")]),i("li",null,[i("p",null,"从网络中获取的；")]),i("li",null,[i("p",null,"来自命令行的输入；")]),i("li",null,[i("p",null,"包含复杂的字符串处理操作（分析不出常量结果）；")]),i("li",null,[i("p",null,"动态生成的；")]),i("li",null,[i("p",null,"经过加密的。")])],-1),i("p",null,"所以这个方法有一个问题：如果我们不能够静态地知道字符串参数的值，反射目标就无法被解析出来。",-1),i("h4",{id:"思路2-类型接口-字符串分析-指针分析",tabindex:"-1"},[s("思路2: 类型接口 + 字符串分析 + 指针分析 "),i("a",{class:"header-anchor",href:"#思路2-类型接口-字符串分析-指针分析","aria-label":'Permalink to "思路2: 类型接口 + 字符串分析 + 指针分析"'},"​")],-1),i("div",{class:"definition"},[i("p",{class:"title"},"定义12.4"),i("p",null,[s("称反射目标创建函数的调用点为 "),i("strong",null,"创建点（Creation Points）"),s(" ，反射目标行为函数的调用点为 "),i("strong",null,"使用点（Usage Point）"),s(" 。")])],-1),i("p",null,"当创建点的字符串参数没有办法静态地解析出来的时候，我们可以尝试通过这个反射目标的使用点来推测反射目标是什么。",-1),i("p",null,"也就是说，我们虽然在这个反射目标刚出生的时候不知道它是谁。但是，我们可以根据它后面干了什么反过来推测它是谁。",-1),i("p",{style:{"text-align":"center"}},[i("img",{src:m,alt:"reflection",style:{zoom:"30%"}})],-1),i("p",null,[s("比如说，上面这个例子，我们可以推测出第175行反射的目标方法一定有一个参数（根据第155行的内容），且这个参数的声明类型一定是 "),i("code",null,"FrameworkCommandInterpreter"),s(" 或者它的基类/子类（因为实际类型是"),i("code",null,"FrameworkCommandInterpreter"),s("）.")],-1),i("p",null,"根据这个信息，我们就可以缩小目标方法的范围，再根据一些别的辅助信息，从而将目标方法的可能性缩小到一个比较小的范围里面，甚至确定目标方法。",-1),i("p",{style:{"text-align":"center"}},[i("img",{src:v,alt:"reflection2",style:{zoom:"30%"}})],-1),i("p",null,"这样做是因为Java有很强大的类型接口，能够辅助我们推测，并达到一个比较好的精度。",-1),i("h4",{id:"思路3-辅以动态分析",tabindex:"-1"},[s("思路3: 辅以动态分析 "),i("a",{class:"header-anchor",href:"#思路3-辅以动态分析","aria-label":'Permalink to "思路3: 辅以动态分析"'},"​")],-1),i("p",null,"这种思路是做起来最简单的，放弃静态解析的幻想，使用一些动态测试样例去帮助确定目标方法，然后使用动态分析的结果来辅助静态分析。",-1),i("p",null,"但是，这个方法是很难做到完全（sound）的，因为动态生成的测试样例想要覆盖所有的可能性是很难做到的。",-1),i("p",null,"并且如果我已经提前静态地知道了所有的可能性，用来生成测试样例的话，我还需要测试用例干嘛呢？我要解决的问题不就是弄清楚这个程序所有可能的行为么？我已经提前知道了所有的可能性呀。",-1),i("h2",{id:"_12-3-难语言特性举隅2-原生代码",tabindex:"-1"},[s("12.3 难语言特性举隅2：原生代码 "),i("a",{class:"header-anchor",href:"#_12-3-难语言特性举隅2-原生代码","aria-label":'Permalink to "12.3 难语言特性举隅2：原生代码"'},"​")],-1),i("h3",{id:"_12-3-1-java原生接口",tabindex:"-1"},[s("12.3.1 Java原生接口 "),i("a",{class:"header-anchor",href:"#_12-3-1-java原生接口","aria-label":'Permalink to "12.3.1 Java原生接口"'},"​")],-1),i("p",null,"Java是一个虚拟机语言，是运行在JVM上的，而JVM是用C/C++写的，因为毕竟需要和操作系统打交道，以及更底层的各种设备的访问和驱动。",-1),i("div",{class:"definition"},[i("p",{class:"title"},"定义12.5"),i("p",null,[i("strong",null,"Java原生接口（Java Native Interface, JNI）"),s(" 是JVM的一个功能模块，允许Java代码和原生代码（C/C++）之间的交互。")])],-1),i("p",{style:{"text-align":"center"}},[i("img",{src:b,alt:"jni",style:{zoom:"30%"}})],-1),i("p",null,"为什么我们需要JNI呢？",-1),i("ul",null,[i("li",null,[i("p",null,"首先是因为我们需要一些平台相关的特性支持（也就是需要一些操作系统提供的功能）；")]),i("li",null,[i("p",null,"其次是为了复用现有的很多用C/C++书写的原生库。")])],-1),i("h3",{id:"_12-3-2-原生代码难分析的原因",tabindex:"-1"},[s("12.3.2 原生代码难分析的原因 "),i("a",{class:"header-anchor",href:"#_12-3-2-原生代码难分析的原因","aria-label":'Permalink to "12.3.2 原生代码难分析的原因"'},"​")],-1),i("p",null,"我们来看一个Java使用原生代码的例子。",-1),i("p",null,[s("首先是一段C代码，下面这段C代码会被编译打包成 "),i("code",null,"GuessMeLib.so"),s(" （假设在Linux平台上）。")],-1),i("div",{class:"language-c vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#include"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," <jni.h>")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"JNIEXPORT jobject JNICALL "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Java_JNIExample_guessMe"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(JNIEnv "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"env"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", jobject "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"obj"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    jclass clz "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"env)->"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"FindClass"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(env, "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"JNIExample"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    jmethodID constructor "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"env)->"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"GetMethodID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(env, clz, "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"<init>"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"()V"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"env)->"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NewObject"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(env, clz, constructor);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"})],-1),i("p",null,[s("其中，"),i("code",null,"jni.h"),s(" 提供了很多接口，比如说 "),i("code",null,"JNIEnv"),s(" 提供了 "),i("code",null,"FindClass"),s(" 、 "),i("code",null,"GetMethodID"),s(" 、 "),i("code",null,"NewObject"),s(" 、 "),i("code",null,"CallVoidMethod"),s(" 等等接口。这些JNI函数能够让我们在原生代码中创建对象、访问字段、调用方法等等。")],-1),i("p",null,"然后是一段使用原生代码的Java代码。",-1),i("div",{class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," JINExample"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    static"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        System."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"loadLibrary"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"GuessMeLib"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"); "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 载入原生库")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," native"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Object "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"guessMe"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(); "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 声明原生方法")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," static"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," main"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"String"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"[] "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"args"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        JNIExample je "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," JNIExample"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        Object obj "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," je."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"guessMe"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ... ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"})],-1),i("p",null,"考虑上面这段代码的第10行，Java的静态分析器怎样分析这个方法调用呢？这个方法里面甚至都不是Java代码，我们根本无法用Java的分析器直接分析这样的Java代码。所以这是一个难问题。",-1),i("h3",{id:"_12-3-3-一些处理思路",tabindex:"-1"},[s("12.3.3 一些处理思路 "),i("a",{class:"header-anchor",href:"#_12-3-3-一些处理思路","aria-label":'Permalink to "12.3.3 一些处理思路"'},"​")],-1),i("p",null,"现在实践中使用的原生代码处理方法是对于关键原生代码进行人工模拟。简单来说，就是为关键的原生代码编写等价的Java代码用于静态分析。",-1),i("p",null,"比如说下面这个函数：",-1),i("div",{class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"java.lang.System."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"arraycopy"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(src, srcPos, dest, destPos, length)")])])]),i("button",{class:"collapse"})],-1),i("p",null,"它的作用是将一个数组从某个位置开始的若干个元素拷贝到另一个数组从某个位置开始一段空间内。",-1),i("p",{style:{"text-align":"center"}},[i("img",{src:f,alt:"arraycopy",style:{zoom:"40%"}})],-1),i("p",null,[s("为了提高效率， "),i("code",null,"arraycopy()"),s(" 是用原生代码实现的，我们静态分析的可以将它转化成等价的java代码：")],-1),i("div",{class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"for"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," i "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"; i "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," length; i"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"++"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    dest[destPos "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," i] "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," src[srcPos "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," i];")])])]),i("button",{class:"collapse"})],-1),i("p",null,[s("如果是进行指针分析的话，在6.4.1节中，我们对数组做过一层抽象，忽略数组下标，将数组的所有元素抽象成一个 "),i("code",null,"arr"),s(" 字段，这样的话 "),i("code",null,"arraycopy()"),s(" 就可以等价于：")],-1),i("div",{class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"temp "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," src.arr;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dest.arr "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," temp;")])])]),i("button",{class:"collapse"})],-1),i("p",null,"看起来简洁了不少。这个例子告诉我们，在手动实现原生代码的时候，可以针对我们要研究的问题进行一些抽象，从而在不影响问题研究的前提下简化实现。",-1),i("p",null,"出了人工模拟关键原生代码以外，现在也有研究是通过二进制扫描的方式来识别原生代码中的Java调用。",-1),i("blockquote",null,[i("p",null,"Identifying Java Calls in Native Code via Binary Scanning (ISSTA 2020) George Fourtounis, Leonidas Triantafyllou, Yannis Smaragdakis, University of Athens")],-1),i("p",null,[s("更多的和近似完全性相关的内容可以参见"),i("a",{href:"http://soundiness.org/",target:"_blank",rel:"noreferrer"},"soundiness"),s("主页。")],-1),i("h2",{id:"_12-4-自检问题",tabindex:"-1"},[s("12.4 自检问题 "),i("a",{class:"header-anchor",href:"#_12-4-自检问题","aria-label":'Permalink to "12.4 自检问题"'},"​")],-1),i("ol",null,[i("li",null,[i("p",null,"近似完全性（Soundiness）的动机和概念是什么？")]),i("li",null,[i("p",null,"为什么Java反射（Reflection）和原生代码是难分析的？")])],-1),i("div",{class:"tip custom-block"},[i("p",{class:"custom-block-title"},[i("span",{lang:"en"},"TIP"),i("span",{lang:"zh-CN"},"提示")]),i("p",null,"🎊 完结撒花! 🎉")],-1)])),"main-header":l(()=>[n(a.$slots,"main-header")]),"main-header-after":l(()=>[n(a.$slots,"main-header-after")]),"main-nav":l(()=>[n(a.$slots,"main-nav")]),"main-content":l(()=>[n(a.$slots,"main-content")]),"main-content-after":l(()=>[n(a.$slots,"main-content-after")]),"main-nav-before":l(()=>[n(a.$slots,"main-nav-before")]),"main-nav-after":l(()=>[n(a.$slots,"main-nav-after")]),comment:l(()=>[n(a.$slots,"comment")]),footer:l(()=>[n(a.$slots,"footer")]),aside:l(()=>[n(a.$slots,"aside")]),"aside-custom":l(()=>[n(a.$slots,"aside-custom")]),default:l(()=>[n(a.$slots,"default")]),_:3},8,["frontmatter"])}}};export{P as default};
